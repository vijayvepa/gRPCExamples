
// Generated by Akka gRPC. DO NOT EDIT.
package com.example.helloworld;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcChannel;
import akka.grpc.GrpcClientCloseException;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static com.example.helloworld.GreeterService.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class GreeterServiceClient extends GreeterServiceClientPowerApi implements GreeterService, AkkaGrpcClient {
  public static final GreeterServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultGreeterServiceClient(akka.grpc.GrpcChannel$.MODULE$.apply(settings, sys), true, sys);
  }

  public static final GreeterServiceClient create(GrpcChannel channel, ClassicActorSystemProvider sys) {
    return new DefaultGreeterServiceClient(channel, false, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultGreeterServiceClient extends GreeterServiceClient {

      private final GrpcChannel channel;
      private final boolean isChannelOwned;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultGreeterServiceClient(GrpcChannel channel, boolean isChannelOwned, ClassicActorSystemProvider sys) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = channel.settings();
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply> sayHelloRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(sayHelloDescriptor, channel, options, settings, ec);
      }
    
  
    
      
        private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<com.example.helloworld.HelloRequest, akka.NotUsed>, com.example.helloworld.HelloReply> sayHelloToAllRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaBidirectionalStreamingRequestBuilder<>(
                               sayHelloToAllDescriptor, channel, options, settings, ec);
        }
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of sayHello
         */
        public java.util.concurrent.CompletionStage<com.example.helloworld.HelloReply> sayHello(com.example.helloworld.HelloRequest request) {
          return sayHello().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer sayHello(com.example.helloworld.HelloRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply> sayHello()
        
        {
          return sayHelloRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of sayHelloToAll
         */
        public akka.stream.javadsl.Source<com.example.helloworld.HelloReply, akka.NotUsed> sayHelloToAll(akka.stream.javadsl.Source<com.example.helloworld.HelloRequest, akka.NotUsed> request) {
          return sayHelloToAll().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer sayHelloToAll(com.example.helloworld.HelloRequest) if possible.
         */
        
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<com.example.helloworld.HelloRequest, akka.NotUsed>, com.example.helloworld.HelloReply> sayHelloToAll()
        
        {
          return sayHelloToAllRequestBuilder(channel.internalChannel());
        }
      

      
        private static MethodDescriptor<com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply> sayHelloDescriptor =
          MethodDescriptor.<com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHello"))
            .setRequestMarshaller(new ProtoMarshaller<com.example.helloworld.HelloRequest>(HelloRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.example.helloworld.HelloReply>(HelloReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply> sayHelloToAllDescriptor =
          MethodDescriptor.<com.example.helloworld.HelloRequest, com.example.helloworld.HelloReply>newBuilder()
            .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHelloToAll"))
            .setRequestMarshaller(new ProtoMarshaller<com.example.helloworld.HelloRequest>(HelloRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.example.helloworld.HelloReply>(HelloReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        if (isChannelOwned) {
          return channel.closeCS();
        } else {
          throw new GrpcClientCloseException();
        }
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return channel.closedCS();
      }
  }

}



