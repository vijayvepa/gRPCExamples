
// Generated by Akka gRPC. DO NOT EDIT.
package com.akkagrpc.akka;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static com.akkagrpc.akka.AkkaService.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class AkkaServiceClient extends AkkaServiceClientPowerApi implements AkkaService, AkkaGrpcClient {
  public static final AkkaServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultAkkaServiceClient(settings, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultAkkaServiceClient extends AkkaServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultAkkaServiceClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultAkkaServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultAkkaServiceClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<com.akkagrpc.akka.GetAkkaRequest, com.akkagrpc.akka.GetAkkaResponse> getAkkaRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(getAkkaDescriptor, channel, options, settings, ec);
      }
    
  
    
      
        private final StreamResponseRequestBuilder<com.google.protobuf.Empty, com.akkagrpc.akka.GetAkkasResponse> getAkkasRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaServerStreamingRequestBuilder<>(
                               getAkkasDescriptor, channel, options, settings, ec);
        }
      
    
  
    
      private final SingleResponseRequestBuilder<com.akkagrpc.akka.RegisterAkkaRequest, com.akkagrpc.akka.RegisterAkkaResponse> registerAkkaRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(registerAkkaDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.akkagrpc.akka.DisableAkkaRequest, com.akkagrpc.akka.DisableAkkaResponse> disableAkkaRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(disableAkkaDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of getAkka
         */
        public java.util.concurrent.CompletionStage<com.akkagrpc.akka.GetAkkaResponse> getAkka(com.akkagrpc.akka.GetAkkaRequest request) {
          return getAkka().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getAkka(com.akkagrpc.akka.GetAkkaRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.akkagrpc.akka.GetAkkaRequest, com.akkagrpc.akka.GetAkkaResponse> getAkka()
        
        {
          return getAkkaRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of getAkkas
         */
        public akka.stream.javadsl.Source<com.akkagrpc.akka.GetAkkasResponse, akka.NotUsed> getAkkas(com.google.protobuf.Empty request) {
          return getAkkas().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getAkkas(com.google.protobuf.Empty) if possible.
         */
        
          public StreamResponseRequestBuilder<com.google.protobuf.Empty, com.akkagrpc.akka.GetAkkasResponse> getAkkas()
        
        {
          return getAkkasRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of registerAkka
         */
        public java.util.concurrent.CompletionStage<com.akkagrpc.akka.RegisterAkkaResponse> registerAkka(com.akkagrpc.akka.RegisterAkkaRequest request) {
          return registerAkka().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer registerAkka(com.akkagrpc.akka.RegisterAkkaRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.akkagrpc.akka.RegisterAkkaRequest, com.akkagrpc.akka.RegisterAkkaResponse> registerAkka()
        
        {
          return registerAkkaRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of disableAkka
         */
        public java.util.concurrent.CompletionStage<com.akkagrpc.akka.DisableAkkaResponse> disableAkka(com.akkagrpc.akka.DisableAkkaRequest request) {
          return disableAkka().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer disableAkka(com.akkagrpc.akka.DisableAkkaRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.akkagrpc.akka.DisableAkkaRequest, com.akkagrpc.akka.DisableAkkaResponse> disableAkka()
        
        {
          return disableAkkaRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<com.akkagrpc.akka.GetAkkaRequest, com.akkagrpc.akka.GetAkkaResponse> getAkkaDescriptor =
          MethodDescriptor.<com.akkagrpc.akka.GetAkkaRequest, com.akkagrpc.akka.GetAkkaResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.vijayvepa.akkagrpc.akka.AkkaService", "getAkka"))
            .setRequestMarshaller(new ProtoMarshaller<com.akkagrpc.akka.GetAkkaRequest>(GetAkkaRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.akkagrpc.akka.GetAkkaResponse>(GetAkkaResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.protobuf.Empty, com.akkagrpc.akka.GetAkkasResponse> getAkkasDescriptor =
          MethodDescriptor.<com.google.protobuf.Empty, com.akkagrpc.akka.GetAkkasResponse>newBuilder()
            .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.vijayvepa.akkagrpc.akka.AkkaService", "getAkkas"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.akkagrpc.akka.GetAkkasResponse>(GetAkkasResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.akkagrpc.akka.RegisterAkkaRequest, com.akkagrpc.akka.RegisterAkkaResponse> registerAkkaDescriptor =
          MethodDescriptor.<com.akkagrpc.akka.RegisterAkkaRequest, com.akkagrpc.akka.RegisterAkkaResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.vijayvepa.akkagrpc.akka.AkkaService", "RegisterAkka"))
            .setRequestMarshaller(new ProtoMarshaller<com.akkagrpc.akka.RegisterAkkaRequest>(RegisterAkkaRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.akkagrpc.akka.RegisterAkkaResponse>(RegisterAkkaResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.akkagrpc.akka.DisableAkkaRequest, com.akkagrpc.akka.DisableAkkaResponse> disableAkkaDescriptor =
          MethodDescriptor.<com.akkagrpc.akka.DisableAkkaRequest, com.akkagrpc.akka.DisableAkkaResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("com.vijayvepa.akkagrpc.akka.AkkaService", "DisableAkka"))
            .setRequestMarshaller(new ProtoMarshaller<com.akkagrpc.akka.DisableAkkaRequest>(DisableAkkaRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.akkagrpc.akka.DisableAkkaResponse>(DisableAkkaResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



