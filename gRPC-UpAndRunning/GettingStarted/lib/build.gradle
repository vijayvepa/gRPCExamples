/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "com.google.protobuf" version "0.8.19"
    id "application"


}

def gRPCVersion = '1.24.1'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation "io.grpc:grpc-netty:$gRPCVersion"
    implementation "io.grpc:grpc-protobuf:$gRPCVersion"
    implementation "io.grpc:grpc-stub:$gRPCVersion"
    compileOnly "com.google.protobuf:protobuf-java:3.9.2"
}

protobuf{
    protoc{
        artifact = 'com.google.protobuf:protoc:3.9.2'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:${grpcVersion}'
        }
    }
    generateProtoTasks {
        all()*.plugins{
            grpc{}
        }
    }
}

sourceSets{
    man{
        java{
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

jar{
    manifest {
        attributes "Main-Class": "ecommerce.ProductInfoServer"
    }
    from{
        configurations.compile.collect{ it.isDirectory() ? it : zipTree(it)}
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
