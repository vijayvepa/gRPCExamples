plugins {
    id('java')
    id('idea')
    id('com.google.protobuf') version '0.8.19'
}

repositories {
    mavenCentral()
}


def gRPCVersion = '1.24.1'

dependencies {
    implementation "com.google.protobuf:protobuf-java:3.6.1"
    implementation "io.grpc:grpc-netty:$gRPCVersion"
    implementation "io.grpc:grpc-stub:$gRPCVersion"
    implementation "io.grpc:grpc-protobuf:$gRPCVersion"

    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        implementation 'javax.annotation:javax.annotation-api:1.3.1'
    }

    // Extra proto source files besides the ones residing under
    // "src/main".
    //protobuf files("lib/protos.tar.gz")
    //protobuf files("ext/")

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    // Extra proto source files for test besides the ones residing under
    // "src/test".
   // testProtobuf files("lib/protos-test.tar.gz")
}

protobuf{
    protoc{
        artifact = 'com.google.protobuf:protoc:3.9.2'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${gRPCVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main').configureEach {
            plugins {
                // Apply the "grpc" plugin whose spec is defined above, without
                // options.  Note the braces cannot be omitted, otherwise the
                // plugin will not be added. This is because of the implicit way
                // NamedDomainObjectContainer binds the methods.
                grpc { }
            }
        }
    }
}